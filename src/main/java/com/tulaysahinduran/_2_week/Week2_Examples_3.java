package com.tulaysahinduran._2_week;

import com.tulaysahinduran.utils.SpecialColor;

import java.io.IOException;
import java.util.Scanner;
import java.util.logging.*;
/*
Ä°ÅŸte kodunuz iÃ§in bazÄ± sorular:

 Genel Sorular
1. ProgramÄ±n temel amacÄ± nedir ve hangi yÃ¶ntemleri kullanarak bu amacÄ± gerÃ§ekleÅŸtiriyor?
2. Kodda kullanÄ±lan `SpecialColor` sÄ±nÄ±fÄ±nÄ±n amacÄ± nedir? Bu sÄ±nÄ±f olmadan program nasÄ±l Ã§alÄ±ÅŸÄ±r?
3. Kodda kullanÄ±lan `Logger` nesnesinin amacÄ± nedir ve hangi seviyelerde loglama yapÄ±yor?
4. ProgramÄ±n Ã§alÄ±ÅŸmasÄ±nÄ± durduran (terminate eden) durumlar nelerdir?
5. Kodda hangi eriÅŸim belirleyicileri (access modifiers) kullanÄ±lmÄ±ÅŸtÄ±r ve neden bu ÅŸekilde seÃ§ilmiÅŸtir?

 FaktÃ¶riyel Hesaplama Ä°le Ä°lgili Sorular
6. Program hangi iki farklÄ± yÃ¶ntemi kullanarak faktÃ¶riyel hesaplamaktadÄ±r? Bu yÃ¶ntemlerin farklarÄ± nelerdir?
7. Ä°teratif faktÃ¶riyel hesaplama yÃ¶ntemi nasÄ±l Ã§alÄ±ÅŸÄ±r ve zaman karmaÅŸÄ±klÄ±ÄŸÄ± nedir?
8. Recursive faktÃ¶riyel hesaplama yÃ¶ntemi neden daha fazla bellek kullanÄ±r?
9. Recursive faktÃ¶riyel hesaplama iÃ§in bir sÄ±nÄ±r belirlenmiÅŸ. Bunun sebebi nedir?
10. EÄŸer recursive fonksiyon sÄ±nÄ±rÄ± kaldÄ±rÄ±lÄ±rsa ne gibi bir problem yaÅŸanabilir?

 GiriÅŸ ve DoÄŸrulama MekanizmasÄ± Ä°le Ä°lgili Sorular
11. KullanÄ±cÄ±nÄ±n negatif sayÄ± girmesi durumunda program nasÄ±l bir tepki veriyor?
12. Program, ondalÄ±klÄ± (decimal) sayÄ± girilmesini nasÄ±l engelliyor ve kaÃ§ hata sonrasÄ± program kapanÄ±yor?
13. KullanÄ±cÄ±dan alÄ±nan giriÅŸleri loglamak neden Ã¶nemlidir?
14. Kodun `getValidPositiveNumber()` metodunda hangi doÄŸrulama kontrolleri yer alÄ±yor?
15. ProgramÄ±n giriÅŸ alma metodunda hatalÄ± giriÅŸlerin Ã¶nlenmesi iÃ§in nasÄ±l bir mantÄ±k kullanÄ±lmÄ±ÅŸtÄ±r?

 Kod Ä°yileÅŸtirme ve GeliÅŸtirme Ä°le Ä°lgili Sorular
16. ProgramÄ±n geliÅŸtirilmesi iÃ§in hangi ek Ã¶zellikler eklenebilir?
17. Kodda exception handling (istisna yÃ¶netimi) yeterince saÄŸlanmÄ±ÅŸ mÄ±? Hangi durumlarda iyileÅŸtirme yapÄ±labilir?
18. Kodun test edilebilirliÄŸini artÄ±rmak iÃ§in hangi deÄŸiÅŸiklikler yapÄ±labilir?
19. ProgramÄ±n daha kullanÄ±cÄ± dostu hale getirilmesi iÃ§in ne gibi geliÅŸtirmeler Ã¶nerirsiniz?
20. Log mekanizmasÄ± ile ilgili iyileÅŸtirme Ã¶nerileriniz nelerdir?

Bu sorular programÄ±n mantÄ±ÄŸÄ±nÄ± daha iyi anlamanÄ±za ve geliÅŸtirilmesi gereken noktalarÄ± fark etmenize yardÄ±mcÄ± olabilir. EÄŸer daha teknik sorular isterseniz, ona gÃ¶re eklemeler yapabilirim! ğŸš€
*/

/*
YÃ¶ntem   | Zaman karmaÅŸÄ±klÄ±ÄŸÄ± | Uzay KarmaÅŸÄ±klÄ±ÄŸÄ± | Avantaj             | Dezavantaj
---------| ------------------ | ------------------| ------------------- | ----------
iterative| O(n)               | O(1)              | HÄ±zlÄ±, hafÄ±za dostu | Kodu daha uzundur
Recursive| O(n)               | O(n)              | Daha okunaklÄ±,      | YavaÅŸtÄ±r
                                                    Matematiksel gÃ¶sterim
 */

// System

// Access Modifier
public class Week2_Examples_3 {

    private static final int MAX_DECIMAL_ATTEMPTS = 3;
    private static final int MAX_RECURSIVE_LIMIT = 20;
    private static final Scanner scanner = new Scanner(System.in);
    private static final Logger logger = Logger.getLogger(Week2_Examples_3.class.getName());

    static {
        try {
            LogManager.getLogManager().reset(); // Ã–nceki log ayarlarÄ±nÄ± sÄ±fÄ±rla
            FileHandler fileHandler = new FileHandler("factorial_log.log", true);
            fileHandler.setFormatter(new SimpleFormatter());
            logger.addHandler(fileHandler);
            logger.setLevel(Level.ALL);
        } catch (IOException e) {
            System.err.println("Log dosyasÄ± oluÅŸturulamadÄ±: " + e.getMessage());
        }
    }

    // FaktÃ¶riyel ProgramÄ±nÄ± Ã‡alÄ±ÅŸtÄ±rma
    private static void runFactorialProgram() {
        while (true) {
            System.out.println("\n" + SpecialColor.YELLOW + "LÃ¼tfen bir seÃ§im yapÄ±nÄ±z:\n1) Ä°teratif FaktÃ¶riyel\n2) Ã–zyinelemeli FaktÃ¶riyel\n3) Sistem Ã–zellikler\n4) Ã‡Ä±kÄ±ÅŸ\n" + SpecialColor.RESET);
            int choice = getUserChoice();

            switch (choice) {
                case 1:
                    long iterativeNumber = getValidPositiveNumber();
                    measureIterativeFactorial(iterativeNumber);
                    break;
                case 2:
                    long recursiveNumber = getValidPositiveNumber();
                    if (recursiveNumber > MAX_RECURSIVE_LIMIT) {
                        System.out.println("UYARI: Girilen sayÄ± recursive fonksiyon iÃ§in Ã§ok bÃ¼yÃ¼k! Maksimum: " + MAX_RECURSIVE_LIMIT);
                        logger.warning("Recursive fonksiyon sÄ±nÄ±rÄ± aÅŸÄ±ldÄ±: " + recursiveNumber);
                    } else {
                        measureRecursiveFactorial(recursiveNumber);
                    }
                    break;
                case 3:
                    systemInfo();
                    break;
                case 4:
                    System.out.println("Program sonlandÄ±rÄ±lÄ±yor...");
                    logger.info("Program sonlandÄ±rÄ±ldÄ±.");
                    return;
                default:
                    System.out.println("LÃ¼tfen geÃ§erli bir seÃ§enek girin.");
            }
        }
    }

    // KullanÄ±cÄ± SeÃ§imini Alma
    private static int getUserChoice() {
        while (true) {
            if (scanner.hasNextInt()) {
                return scanner.nextInt();
            } else {
                System.out.println("GeÃ§ersiz giriÅŸ! LÃ¼tfen bir tam sayÄ± giriniz.");
                logger.warning("GeÃ§ersiz giriÅŸ yapÄ±ldÄ±.");
                scanner.next();
            }
        }
    }

    // KullanÄ±cÄ±dan GeÃ§erli Pozitif SayÄ± Alma
    private static long getValidPositiveNumber() {
        int decimalAttemptCount = 0;

        while (true) {
            System.out.println("\nLÃ¼tfen pozitif bir tam sayÄ± giriniz:");

            if (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                if (number < 0) {
                    System.out.println("Negatif sayÄ± girdiniz! Program sonlandÄ±rÄ±lÄ±yor...");
                    logger.severe("Negatif sayÄ± girildi: " + number);
                    return 0;
                } else if (number == 0) {
                    System.out.println("0! = 1");
                    return 1;
                }
                return number;

            } else if (scanner.hasNextDouble()) {
                decimalAttemptCount++;
                System.out.println("OndalÄ±klÄ± sayÄ± girdiniz! Kalan deneme hakkÄ±nÄ±z: " + (MAX_DECIMAL_ATTEMPTS - decimalAttemptCount));
                logger.warning("OndalÄ±klÄ± sayÄ± girildi.");
                scanner.next();

                if (decimalAttemptCount >= MAX_DECIMAL_ATTEMPTS) {
                    System.out.println("ÃœÃ§ defa ondalÄ±klÄ± sayÄ± girdiniz! Program sonlandÄ±rÄ±lÄ±yor...");
                    logger.severe("KullanÄ±cÄ± Ã¼Ã§ kez hatalÄ± giriÅŸ yaptÄ± ve sistemden atÄ±ldÄ±.");
                    System.exit(0);
                }
            } else {
                System.out.println("HatalÄ± giriÅŸ yaptÄ±nÄ±z! LÃ¼tfen bir tam sayÄ± giriniz.");
                logger.warning("HatalÄ± giriÅŸ yapÄ±ldÄ±.");
                scanner.next();
            }
        }
    }

    // Ä°teratif FaktÃ¶riyel Hesaplama ve SÃ¼re Ã–lÃ§me
    private static void measureIterativeFactorial(long number) {
        long startTime = System.nanoTime();
        long result = calculateFactorialIterative(number);
        long endTime = System.nanoTime();
        long duration = endTime - startTime;

        System.out.println(number + "! = " + result);
        System.out.println("Ä°teratif faktÃ¶riyel hesaplama sÃ¼resi: " + duration + " nanosecond");
        logger.info("Ä°teratif faktÃ¶riyel hesaplandÄ±: " + number + "! = " + result);
    }

    // Recursive FaktÃ¶riyel Hesaplama ve SÃ¼re Ã–lÃ§me
    private static void measureRecursiveFactorial(long number) {
        long startTime = System.nanoTime();
        long result = calculateFactorialRecursive(number);
        long endTime = System.nanoTime();
        long duration = endTime - startTime;

        System.out.println(number + "! = " + result);
        System.out.println("Recursive faktÃ¶riyel hesaplama sÃ¼resi: " + duration + " nanosecond");
        logger.info("Recursive faktÃ¶riyel hesaplandÄ±: " + number + "! = " + result);
    }

    // Ä°teratif FaktÃ¶riyel Hesaplama
    private static long calculateFactorialIterative(long number) {
        long result = 1;
        for (int i = 1; i <= number; i++) {
            result = i;
        }
        return result;
    }

    // Recursive FaktÃ¶riyel Hesaplama
    private static long calculateFactorialRecursive(long number) {
        if (number == 0 || number == 1) {
            return 1;
        }
        return number * calculateFactorialRecursive(number - 1);
    }

    // Sistem Bilgilerini GÃ¶sterme
    private static void systemInfo() {
        System.out.println("===== Sistem Bilgileri =====");

        // Ä°ÅŸletim Sistemi ve KullanÄ±cÄ± Bilgileri
        System.out.println("OS AdÄ±                 : " + System.getProperty("os.name"));
        System.out.println("OS Versiyonu           : " + System.getProperty("os.version"));
        System.out.println("OS Mimarisi            : " + System.getProperty("os.arch"));
        System.out.println("KullanÄ±cÄ± AdÄ±          : " + System.getProperty("user.name"));
        System.out.println("KullanÄ±cÄ± Ana Dizini   : " + System.getProperty("user.home"));
        System.out.println("Ã‡alÄ±ÅŸma Dizini         : " + System.getProperty("user.dir"));

        System.out.println("\n===== Java Bilgileri =====");
        System.out.println("Java Versiyonu         : " + System.getProperty("java.version"));
        System.out.println("Java Vendor            : " + System.getProperty("java.vendor"));
        System.out.println("Java Vendor URL        : " + System.getProperty("java.vendor.url"));
        System.out.println("Java Runtime Versiyonu : " + System.getProperty("java.runtime.version"));
        System.out.println("Java Home              : " + System.getProperty("java.home"));
        System.out.println("JVM Versiyonu          : " + System.getProperty("java.vm.version"));
        System.out.println("JVM AdÄ±                : " + System.getProperty("java.vm.name"));
        System.out.println("JVM Mimari             : " + System.getProperty("sun.arch.data.model") + "-bit");

        System.out.println("\n===== Bellek KullanÄ±mÄ± =====");
        Runtime runtime = Runtime.getRuntime();
        System.out.println("Toplam Bellek          : " + runtime.totalMemory() / (1024*  1024) + " MB");
        System.out.println("KullanÄ±labilir Bellek  : " + runtime.freeMemory() / (1024*  1024) + " MB");
        System.out.println("Maksimum Bellek        : " + runtime.maxMemory() / (1024*  1024) + " MB");

        System.out.println("\n===== Ortam DeÄŸiÅŸkenleri =====");
        System.out.println("PATH                  : " + System.getenv("PATH"));
        System.out.println("JAVA_HOME             : " + System.getenv("JAVA_HOME"));
        System.out.println("TEMP Dizin            : " + System.getenv("TEMP"));
        System.out.println("USER DOMAIN           : " + System.getenv("USERDOMAIN"));
        System.out.println("Shell (Linux/Mac)     : " + System.getenv("SHELL"));
        System.out.println("Processor SayÄ±sÄ±      : " + System.getenv("NUMBER_OF_PROCESSORS"));
        System.out.println("Processor Mimari      : " + System.getenv("PROCESSOR_ARCHITECTURE"));
        System.out.println("KullanÄ±cÄ± Profili     : " + System.getenv("USERPROFILE"));
    }

    // PSVM
    public static void main(String[] args) {
        runFactorialProgram();
        scanner.close();
    }
}
